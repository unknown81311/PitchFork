--[[
	Copyright (c) 2021 Unknown81311
]]
dofile"$GAME_DATA/Scripts/game/AnimationUtil.lua"dofile"$SURVIVAL_DATA/Scripts/util.lua"dofile"$SURVIVAL_DATA/Scripts/game/survival_shapes.lua"PotatoRifle=class()local a={"$GAME_DATA/Character/Char_Tools/Char_spudgun/Base/char_spudgun_base_basic.rend","$GAME_DATA/Character/Char_Tools/Char_spudgun/Barrel/Barrel_basic/char_spudgun_barrel_basic.rend","$GAME_DATA/Character/Char_Tools/Char_spudgun/Sight/Sight_basic/char_spudgun_sight_basic.rend","$GAME_DATA/Character/Char_Tools/Char_spudgun/Stock/Stock_broom/char_spudgun_stock_broom.rend","$GAME_DATA/Character/Char_Tools/Char_spudgun/Tank/Tank_basic/char_spudgun_tank_basic.rend"}local b={"$GAME_DATA/Character/Char_Male/Animations/char_male_tp_spudgun.rend","$GAME_DATA/Character/Char_Tools/Char_spudgun/char_spudgun_tp_animlist.rend"}local c={"$GAME_DATA/Character/Char_Tools/Char_spudgun/char_spudgun_fp_animlist.rend"}sm.tool.preloadRenderables(a)sm.tool.preloadRenderables(b)sm.tool.preloadRenderables(c)function PotatoRifle.client_onCreate(self)lkpp=sm.localPlayer.getPlayer():getCharacter():getWorldPosition()sm.debugDraw.addArrow("u_0_backtrack0",lkpp,lkpp+sm.vec3.new(1,1,1),sm.color.new("ff0000"))self.shootEffect=sm.effect.createEffect("SpudgunBasic - BasicMuzzel")self.shootEffectFP=sm.effect.createEffect("SpudgunBasic - FPBasicMuzzel")PotatoRifle_pages={{title="Hax",buttons={"potato","banan","tape","explosivetape","full unlock","Aim Bot"}},{title="Ammount",buttons={1,10,15,20,30,50}},{title="speed",buttons={200,300,400,500,800,1000}},{title="misc",buttons={"random auto","cool auto","ban mode","cool spread","lift fly","change pos"}},{title="misc2",buttons={"safe lift","no spread","spinny"}}}self.ammoType="potato"unlocked=false;auto=false;rAuto=false;ca=false;self.ammounter=1;spread=false;fly=false;shootAW=false;svlft=false;self.veloc=200;nosprd=false;ana=false end;local function d()local e=sm.player.getAllPlayers()local f=sm.localPlayer.getPlayer()for g,h in pairs(e)do if h==f then e[g]=nil;return e end end;return output_list end;function PotatoRifle.client_onReload(self)if auto then local e=d()self.your_counter=((self.your_counter or-1)+1)%#e;local i=e[self.your_counter+1]sm.gui.displayAlertText(tostring(i:getName()),2)self.autoLocation=i:getCharacter()elseif shootAW then self.lpwp=sm.localPlayer.getPlayer().character.worldPosition;local j,k=sm.physics.raycast(sm.camera.getPosition(),sm.camera.getPosition()+sm.localPlayer.getPlayer():getCharacter():getDirection()*10000)if j then sm.camera.setPosition(k.pointWorld+sm.vec3.new(0,0,5/4))sm.gui.displayAlertText("changed position to:"..k.pointWorld.x..','..k.pointWorld.y..','..k.pointWorld.x,2)self.lpwp=k.pointWorld+sm.vec3.new(0,0,5/4)end end end;function PotatoRifle.client_onToggle(self)self.pages=0;for l,m in pairs(PotatoRifle_pages)do self.pages=self.pages+1 end;function selectPage(n)local o=PotatoRifle_pages[n]self.gui:setText("pageTITLE",o.title)self.gui:setText("pageNUM",n.."/"..self.pages)for l=0,6 do self.gui:setVisible("selBtn"..l,false)end;for l,p in ipairs(o.buttons)do self.gui:setText("selBtn"..l,tostring(p))self.gui:setVisible("selBtn"..l,true)end end;self.gui=sm.gui.createGuiFromLayout("$CONTENT_4ca7b7db-95fa-4241-82c5-c7643a5a399d/Gui/spud_GUI.layout")self.pageNUM=1;selectPage(1)self.gui:open()self.gui:setButtonCallback("leftBTN","guiInteract")self.gui:setButtonCallback("rightBTN","guiInteract")self.gui:setButtonCallback("sendBTN","guiInteract")for l=0,6 do self.gui:setButtonCallback("selBtn"..l,"guiInteract_sel")end end;function PotatoRifle.guiInteract(self,q)if q=="leftBTN"and self.pageNUM==1 or q=="rightBTN"and self.pageNUM==self.pages then return end;if q=="leftBTN"then self.pageNUM=self.pageNUM-1 elseif q=="rightBTN"then self.pageNUM=self.pageNUM+1 end;selectPage(self.pageNUM)end;function PotatoRifle.guiInteract_sel(self,q)local r="selBtn"if self.pageNUM==1 then if q==r..1 then self.ammoType="potato"elseif q==r..2 then self.ammoType="banana"elseif q==r..3 then self.ammoType="tape"elseif q==r..4 then self.ammoType="explosivetape"elseif q==r..5 then unlocked=not unlocked;self:client_onEquip()self:loadAnimations()elseif q=="selBtn6"then if#sm.player.getAllPlayers()>1 then auto=not auto;if not auto then end;if auto then sm.gui.displayAlertText("auto enabled",2)shootAW=false else sm.gui.displayAlertText("auto disabled",2)end else sm.gui.displayAlertText("no player to target!",2)end end elseif self.pageNUM==2 then self.ammounter=PotatoRifle_pages[self.pageNUM].buttons[tonumber(string.sub(q,7,8))]elseif self.pageNUM==3 then self.veloc=PotatoRifle_pages[self.pageNUM].buttons[tonumber(string.sub(q,7,8))]elseif self.pageNUM==4 then if q==r..1 then if not auto then sm.gui.displayAlertText("auto needs to be enabled first",2)end;rAuto=not rAuto;if rAuto then sm.gui.displayAlertText("random auto enabled",2)end elseif q==r..2 then if not auto then sm.gui.displayAlertText("auto needs to be enabled first",2)end;ca=not ca;if ca then sm.gui.displayAlertText("cool auto enabled",2)end elseif q==r..3 then ban=not ban;self:client_onEquip()self:loadAnimations()if ban then sm.gui.displayAlertText("now in baning mod!",5)else sm.gui.displayAlertText("no longer in ban mod.",5)end elseif q==r..4 then spread=not spread;self:client_onEquip()self:loadAnimations()elseif q==r..5 then fly=not fly elseif q==r..6 then shootAW=not shootAW;if shootAW then local s=sm.camera.getPosition()sm.camera.setCameraState(sm.camera.state.cutsceneTP)sm.camera.setPosition(s)sm.gui.displayAlertText("now in change location mode!",2)auto=false else sm.camera.setCameraState(sm.camera.state.default)sm.gui.displayAlertText("no longer in change location mode!",2)end end elseif self.pageNUM==5 then if q==r..1 then svlft=true;print(q)elseif q==r..2 then nosprd=not nosprd;print(q)elseif q==r..3 then ana=not ana;if ana then direction=0 end;print(q)end end end;function PotatoRifle.client_onRefresh(self)self:loadAnimations()end;function PotatoRifle.loadAnimations(self)self.tpAnimations=createTpAnimations(self.tool,{shoot={"spudgun_shoot",{crouch="spudgun_crouch_shoot"}},aim={"spudgun_aim",{crouch="spudgun_crouch_aim"}},aimShoot={"spudgun_aim_shoot",{crouch="spudgun_crouch_aim_shoot"}},idle={"spudgun_idle"},pickup={"spudgun_pickup",{nextAnimation="idle"}},putdown={"spudgun_putdown"}})local t={idle="spudgun_idle",idleRelaxed="spudgun_relax",sprint="spudgun_sprint",runFwd="spudgun_run_fwd",runBwd="spudgun_run_bwd",jump="spudgun_jump",jumpUp="spudgun_jump_up",jumpDown="spudgun_jump_down",land="spudgun_jump_land",landFwd="spudgun_jump_land_fwd",landBwd="spudgun_jump_land_bwd",crouchIdle="spudgun_crouch_idle",crouchFwd="spudgun_crouch_fwd",crouchBwd="spudgun_crouch_bwd"}for u,v in pairs(t)do self.tool:setMovementAnimation(u,v)end;setTpAnimation(self.tpAnimations,"idle",5.0)if self.tool:isLocal()then self.fpAnimations=createFpAnimations(self.tool,{equip={"spudgun_pickup",{nextAnimation="idle"}},unequip={"spudgun_putdown"},idle={"spudgun_idle",{looping=true}},shoot={"spudgun_shoot",{nextAnimation="idle"}},aimInto={"spudgun_aim_into",{nextAnimation="aimIdle"}},aimExit={"spudgun_aim_exit",{nextAnimation="idle",blendNext=0}},aimIdle={"spudgun_aim_idle",{looping=true}},aimShoot={"spudgun_aim_shoot",{nextAnimation="aimIdle"}},sprintInto={"spudgun_sprint_into",{nextAnimation="sprintIdle",blendNext=0.2}},sprintExit={"spudgun_sprint_exit",{nextAnimation="idle",blendNext=0}},sprintIdle={"spudgun_sprint_idle",{looping=true}}})end;if unlocked==false then self.normalFireMode={fireCooldown=0.20,spreadCooldown=0.18,spreadIncrement=2.6,spreadMinAngle=.25,spreadMaxAngle=8,fireVelocity=200.0,minDispersionStanding=0.1,minDispersionCrouching=0.04,maxMovementDispersion=0.4,jumpDispersionMultiplier=2}self.aimFireMode={fireCooldown=0.20,spreadCooldown=0.18,spreadIncrement=1.3,spreadMinAngle=0,spreadMaxAngle=8,fireVelocity=200.0,minDispersionStanding=0.01,minDispersionCrouching=0.01,maxMovementDispersion=0.4,jumpDispersionMultiplier=2}self.fireCooldownTimer=0;self.spreadCooldownTimer=0;self.movementDispersion=0;self.sprintCooldownTimer=0;self.sprintCooldown=0.3;self.aimBlendSpeed=3.0;self.blendTime=0.2;self.jointWeight=0;self.spineWeight=0 else self.normalFireMode={fireCooldown=0,spreadCooldown=0,spreadIncrement=0,spreadMinAngle=0,spreadMaxAngle=0,fireVelocity=200,minDispersionStanding=0,minDispersionCrouching=0,maxMovementDispersion=0,jumpDispersionMultiplier=0}self.aimFireMode={fireCooldown=0,spreadCooldown=0,spreadIncrement=0,spreadMinAngle=0,spreadMaxAngle=0,fireVelocity=200,minDispersionStanding=0,minDispersionCrouching=0,maxMovementDispersion=0,jumpDispersionMultiplier=0}self.fireCooldownTimer=0;self.spreadCooldownTimer=0;self.movementDispersion=0;self.sprintCooldownTimer=0;self.sprintCooldown=0.0;self.aimBlendSpeed=1.0;self.blendTime=0.0;self.jointWeight=0;self.spineWeight=0 end;self.aimFireMode.fireVelocity=self.veloc;self.normalFireMode.fireVelocity=self.veloc;if ban then self.aimFireMode.fireVelocity=50000000000000000;self.normalFireMode.fireVelocity=50000000000000000 end;if nosprd then self.aimFireMode.spreadCooldown=0;self.aimFireMode.spreadIncrement=0;self.aimFireMode.spreadMinAngle=0;self.aimFireMode.spreadMaxAngle=0;self.normalFireMode.spreadCooldown=0;self.normalFireMode.spreadIncrement=0;self.normalFireMode.spreadMinAngle=0;self.normalFireMode.spreadMaxAngle=0 end;if spread then self.aimFireMode.spreadCooldown=15;self.aimFireMode.spreadIncrement=15;self.aimFireMode.spreadMinAngle=0;self.aimFireMode.spreadMaxAngle=15;self.normalFireMode.spreadCooldown=15;self.normalFireMode.spreadIncrement=15;self.normalFireMode.spreadMinAngle=0;self.normalFireMode.spreadMaxAngle=15 end;local w,z=self.tool:getCameraWeights()self.aimWeight=math.max(w,z)end;function PotatoRifle.client_onUpdate(self,A)if shootAW then sm.camera.setDirection(sm.localPlayer.getPlayer():getCharacter():getDirection())end;local B=self.tool:isSprinting()local C=self.tool:isCrouching()if self.tool:isLocal()then if self.equipped then if B and self.fpAnimations.currentAnimation~="sprintInto"and self.fpAnimations.currentAnimation~="sprintIdle"then swapFpAnimation(self.fpAnimations,"sprintExit","sprintInto",0.0)elseif not self.tool:isSprinting()and(self.fpAnimations.currentAnimation=="sprintIdle"or self.fpAnimations.currentAnimation=="sprintInto")then swapFpAnimation(self.fpAnimations,"sprintInto","sprintExit",0.0)end;if self.aiming and not isAnyOf(self.fpAnimations.currentAnimation,{"aimInto","aimIdle","aimShoot"})then swapFpAnimation(self.fpAnimations,"aimExit","aimInto",0.0)end;if not self.aiming and isAnyOf(self.fpAnimations.currentAnimation,{"aimInto","aimIdle","aimShoot"})then swapFpAnimation(self.fpAnimations,"aimInto","aimExit",0.0)end end;updateFpAnimations(self.fpAnimations,self.equipped,A)end;if not self.equipped then if self.wantEquipped then self.wantEquipped=false;self.equipped=true end;return end;local D,E;if self.tool:isLocal()then local F=0.6;if self.tool:isCrouching()then F=0.29 end;local G=sm.localPlayer.getDirection()local H=self.tool:getFpBonePos("pejnt_barrel")if not self.aiming then D=H+G*0.2 else D=H+G*0.45 end;E=sm.vec3.getRotation(sm.vec3.new(0,0,1),G)self.shootEffectFP:setPosition(D)self.shootEffectFP:setVelocity(self.tool:getMovementVelocity())self.shootEffectFP:setRotation(E)end;local I=self.tool:getTpBonePos("pejnt_barrel")local G=self.tool:getTpBoneDir("pejnt_barrel")D=I+G*0.2;E=sm.vec3.getRotation(sm.vec3.new(0,0,1),G)self.shootEffect:setPosition(D)self.shootEffect:setVelocity(self.tool:getMovementVelocity())self.shootEffect:setRotation(E)self.fireCooldownTimer=math.max(self.fireCooldownTimer-A,0.0)self.spreadCooldownTimer=math.max(self.spreadCooldownTimer-A,0.0)self.sprintCooldownTimer=math.max(self.sprintCooldownTimer-A,0.0)if self.tool:isLocal()then local J=0.0;local K=self.aiming and self.aimFireMode or self.normalFireMode;local L=1.0-(math.max(K.minDispersionCrouching,K.minDispersionStanding)+K.maxMovementDispersion)if C then J=K.minDispersionCrouching else J=K.minDispersionStanding end;if self.tool:getRelativeMoveDirection():length()>0 then J=J+K.maxMovementDispersion*self.tool:getMovementSpeedFraction()end;if not self.tool:isOnGround()then J=J*K.jumpDispersionMultiplier end;self.movementDispersion=J;self.spreadCooldownTimer=clamp(self.spreadCooldownTimer,0.0,K.spreadCooldown)local M=K.spreadCooldown>0.0 and clamp(self.spreadCooldownTimer/K.spreadCooldown,0.0,1.0)or 0.0;self.tool:setDispersionFraction(clamp(self.movementDispersion+M*L,0.0,1.0))if self.aiming then if self.tool:isInFirstPersonView()then self.tool:setCrossHairAlpha(0.0)else self.tool:setCrossHairAlpha(1.0)end;self.tool:setInteractionTextSuppressed(true)else self.tool:setCrossHairAlpha(1.0)self.tool:setInteractionTextSuppressed(false)end end;local N=self.aiming or self.sprintCooldownTimer>0.0;self.tool:setBlockSprint(N)local O=self.tool:getDirection()local P=math.asin(O:dot(sm.vec3.new(0,0,1)))/(math.pi/2)local Q=O:dot(sm.vec3.new(0,0,1))local R=clamp(-Q,0.0,1.0)down=clamp(-P,0.0,1.0)fwd=1.0-math.abs(P)up=clamp(P,0.0,1.0)local S=self.tool:isCrouching()and 1.0 or 0.0;local T=1.0-S;local U=0.0;for u,v in pairs(self.tpAnimations.animations)do v.time=v.time+A;if u==self.tpAnimations.currentAnimation then v.weight=math.min(v.weight+self.tpAnimations.blendSpeed*A,1.0)if v.time>=v.info.duration-self.blendTime then if u=="shoot"or u=="aimShoot"then setTpAnimation(self.tpAnimations,self.aiming and"aim"or"idle",10.0)elseif u=="pickup"then setTpAnimation(self.tpAnimations,self.aiming and"aim"or"idle",0.001)elseif v.nextAnimation~=""then setTpAnimation(self.tpAnimations,v.nextAnimation,0.001)end end else v.weight=math.max(v.weight-self.tpAnimations.blendSpeed*A,0.0)end;U=U+v.weight end;U=U==0 and 1.0 or U;for u,v in pairs(self.tpAnimations.animations)do local V=v.weight/U;if u=="idle"then self.tool:updateMovementAnimation(v.time,V)elseif v.crouch then self.tool:updateAnimation(v.info.name,v.time,V*T)self.tool:updateAnimation(v.crouch.name,v.time,V*S)else self.tool:updateAnimation(v.info.name,v.time,V)end end;local W=self.tool:getRelativeMoveDirection()if(isAnyOf(self.tpAnimations.currentAnimation,{"aimInto","aim","shoot"})and(W:length()>0 or C)or self.aiming and(W:length()>0 or C))and not B then self.jointWeight=math.min(self.jointWeight+10.0*A,1.0)else self.jointWeight=math.max(self.jointWeight-6.0*A,0.0)end;if not B then self.spineWeight=math.min(self.spineWeight+10.0*A,1.0)else self.spineWeight=math.max(self.spineWeight-10.0*A,0.0)end;local X=0.5+P*0.5;self.tool:updateAnimation("spudgun_spine_bend",X,self.spineWeight)local Y=lerp(-22.0,-26.0,S)local Z=lerp(6.0,12.0,S)local _=clamp(P*60.0-15.0,-60.0,40.0)local a0=clamp(P*50.0,-45.0,50.0)local a1=lerp(a0,_,S)local a2=self.jointWeight;self.tool:updateJoint("jnt_hips",sm.vec3.new(a1,Z,Y),0.35*a2*T)local a3=0.35/3*S;self.tool:updateJoint("jnt_spine1",sm.vec3.new(a1,Z,Y),(0.10+a3)*a2)self.tool:updateJoint("jnt_spine2",sm.vec3.new(a1,Z,Y),(0.10+a3)*a2)self.tool:updateJoint("jnt_spine3",sm.vec3.new(a1,Z,Y),(0.45+a3)*a2)self.tool:updateJoint("jnt_head",sm.vec3.new(a1,Z,Y),0.3*a2)local a4=1;if self.aiming then local a5=1-math.pow(1-1/self.aimBlendSpeed,A*60)self.aimWeight=sm.util.lerp(self.aimWeight,1.0,a5)a4=0.12 else local a5=1-math.pow(1-1/self.aimBlendSpeed,A*60)self.aimWeight=sm.util.lerp(self.aimWeight,0.0,a5)a4=1 end;self.tool:updateCamera(2.8,30.0,sm.vec3.new(0.65,0.0,0.05),self.aimWeight)self.tool:updateFpCamera(30.0,sm.vec3.new(0.0,0.0,0.0),self.aimWeight,a4)end;function PotatoRifle.client_onEquip(self,a6)if a6 then sm.audio.play("PotatoRifle - Equip",self.tool:getPosition())end;self.wantEquipped=true;self.aiming=false;local w,z=self.tool:getCameraWeights()self.aimWeight=math.max(w,z)self.jointWeight=0.0;currentRenderablesTp={}currentRenderablesFp={}for g,a7 in pairs(b)do currentRenderablesTp[#currentRenderablesTp+1]=a7 end;for g,a7 in pairs(c)do currentRenderablesFp[#currentRenderablesFp+1]=a7 end;for g,a7 in pairs(a)do currentRenderablesTp[#currentRenderablesTp+1]=a7 end;for g,a7 in pairs(a)do currentRenderablesFp[#currentRenderablesFp+1]=a7 end;self.tool:setTpRenderables(currentRenderablesTp)self:loadAnimations()setTpAnimation(self.tpAnimations,"pickup",0.0001)if self.tool:isLocal()then self.tool:setFpRenderables(currentRenderablesFp)swapFpAnimation(self.fpAnimations,"unequip","equip",0.2)end end;function PotatoRifle.client_onUnequip(self,a6)if a6 then sm.audio.play("PotatoRifle - Unequip",self.tool:getPosition())end;self.wantEquipped=false;self.equipped=false;setTpAnimation(self.tpAnimations,"putdown")if self.tool:isLocal()and self.fpAnimations.currentAnimation~="unequip"then swapFpAnimation(self.fpAnimations,"equip","unequip",0.2)end end;function PotatoRifle.sv_n_onAim(self,a8)self.network:sendToClients("cl_n_onAim",a8)end;function PotatoRifle.cl_n_onAim(self,a8)if not self.tool:isLocal()and self.tool:isEquipped()then self:onAim(a8)end end;function PotatoRifle.onAim(self,a8)self.aiming=a8;if self.tpAnimations.currentAnimation=="idle"or self.tpAnimations.currentAnimation=="aim"or self.tpAnimations.currentAnimation=="relax"and self.aiming then setTpAnimation(self.tpAnimations,self.aiming and"aim"or"idle",5.0)end end;function PotatoRifle.sv_n_onShoot(self,G)self.network:sendToClients("cl_n_onShoot",G)end;function PotatoRifle.cl_n_onShoot(self,G)if not self.tool:isLocal()and self.tool:isEquipped()then self:onShoot(G)end end;function PotatoRifle.onShoot(self,G)self.tpAnimations.animations.idle.time=0;self.tpAnimations.animations.shoot.time=0;self.tpAnimations.animations.aimShoot.time=0;setTpAnimation(self.tpAnimations,self.aiming and"aimShoot"or"shoot",10.0)if self.tool:isInFirstPersonView()then self.shootEffectFP:start()else self.shootEffect:start()end end;function PotatoRifle.calculateFirePosition(self)local a9=self.tool:isCrouching()local aa=self.tool:isInFirstPersonView()local G=sm.localPlayer.getDirection()local ab=math.asin(G.z)local ac=sm.localPlayer.getRight()local ad=sm.vec3.new(0.0,0.0,0.0)if a9 then ad.z=0.15 else ad.z=0.45 end;if aa then if not self.aiming then ad=ad+ac*0.05 end else ad=ad+ac*0.25;ad=ad:rotate(math.rad(ab),ac)end;local ae=GetOwnerPosition(self.tool)+ad;return ae end;function PotatoRifle.calculateTpMuzzlePos(self)local a9=self.tool:isCrouching()local G=sm.localPlayer.getDirection()local ab=math.asin(G.z)local ac=sm.localPlayer.getRight()local up=ac:cross(G)local af=sm.vec3.new(0.0,0.0,0.0)af=af+ac*0.25;af=af+G*0.5;af=af+up*0.25;local ag=ab/(math.pi*0.5)if a9 then af=af+G*0.2;af=af+up*0.1;af=af-ac*0.05;if ag>0.0 then af=af-up*0.2*ag else af=af+up*0.1*math.abs(ag)end else af=af+up*0.1*math.abs(ag)end;local ah=af+GetOwnerPosition(self.tool)return ah end;function PotatoRifle.calculateFpMuzzlePos(self)local ai=(sm.camera.getFov()-45)/45;local up=sm.localPlayer.getUp()local G=sm.localPlayer.getDirection()local ac=sm.localPlayer.getRight()local aj=sm.vec3.new(0.0,0.0,0.0)local ak=sm.vec3.new(0.0,0.0,0.0)if self.aiming then aj=aj-up*0.2;aj=aj+G*0.5;ak=ak-up*0.5;ak=ak-G*0.6 else aj=aj-up*0.15;aj=aj+ac*0.2;aj=aj+G*1.25;ak=ak-up*0.15;ak=ak+ac*0.2;ak=ak+G*0.25 end;return self.tool:getFpBonePos("pejnt_barrel")+sm.vec3.lerp(aj,ak,ai)end;function PotatoRifle.cl_onPrimaryUse(self,al)if self.tool:getOwner().character==nil then return end;if al==sm.tool.interactState.hold then local aa=self.tool:isInFirstPersonView()local G=sm.localPlayer.getDirection()local H=self.lpwp or self:calculateFirePosition()local ah=self:calculateTpMuzzlePos()local am=ah;if aa then am=self:calculateFpMuzzlePos()end;if not aa then local an=sm.camera.getPosition()+sm.camera.getDirection()*sm.camera.getDirection():dot(GetOwnerPosition(self.tool)-sm.camera.getPosition())local j,k=sm.localPlayer.getRaycast(250,an,sm.camera.getDirection())if j then local ao=sm.vec3.normalize(k.pointWorld-H)local ap=ao:dot(G)if ap>0.96592583 then G=ao else local aq=math.asin(ap)G=sm.vec3.lerp(G,ao,math.tan(aq)/3.7320508)end end end;G=G:rotate(math.rad(0.955),sm.camera.getRight())local K=self.aiming and self.aimFireMode or self.normalFireMode;local L=1.0-(math.max(K.minDispersionCrouching,K.minDispersionStanding)+K.maxMovementDispersion)local M=K.spreadCooldown>0.0 and clamp(self.spreadCooldownTimer/K.spreadCooldown,0.0,1.0)or 0.0;M=clamp(self.movementDispersion+M*L,0.0,1.0)local ar=K.spreadMinAngle+(K.spreadMaxAngle-K.spreadMinAngle)*M;G=sm.noise.gunSpread(G,ar)local as=self.tool:getOwner()if as then if unlocked then Damage=2000 else Damage=28 end;local at=0;repeat if ana then direction=direction+.1 or 0;x=math.cos(direction)*math.cos(0)y=math.sin(direction)*math.cos(0)fulldir=sm.vec3.new(x,y,0)sm.projectile.projectileAttack(self.ammoType,Damage,H,fulldir*K.fireVelocity,as,ah,am)if x==360 then x=0 end else if auto and#sm.player.getAllPlayers()>1 then playervelocity=self.autoLocation:getVelocity()direction2=sm.vec3.new(0,0,-1/4)if rAuto then self:client_onReload()end;if ca then local au=math.random(0,180)local av=self.autoLocation.worldPosition+playervelocity/4+sm.vec3.new(math.sin(au)*5,math.cos(au)*5,math.cos(au)*5)sm.projectile.projectileAttack(self.ammoType,Damage,av,-(av-(self.autoLocation:getWorldPosition()+playervelocity/4)):normalize()*K.fireVelocity,as,ah,am)else sm.projectile.projectileAttack(self.ammoType,Damage,self.autoLocation:getWorldPosition()+playervelocity/4,direction2,as,ah,am)end else sm.projectile.projectileAttack(self.ammoType,Damage,H,G*K.fireVelocity,as,ah,am)end end;at=at+1 until at>self.ammounter-1 end;self.fireCooldownTimer=K.fireCooldown;self.spreadCooldownTimer=math.min(self.spreadCooldownTimer+K.spreadIncrement,K.spreadCooldown)self.sprintCooldownTimer=self.sprintCooldown;self:onShoot(G)self.network:sendToServer("sv_n_onShoot",G)setFpAnimation(self.fpAnimations,self.aiming and"aimShoot"or"shoot",0.05)end end;function PotatoRifle.cl_onSecondaryUse(self,al)if al==sm.tool.interactState.start and not self.aiming then self.aiming=true;self.tpAnimations.animations.idle.time=0;self:onAim(self.aiming)self.tool:setMovementSlowDown(self.aiming)self.network:sendToServer("sv_n_onAim",self.aiming)end;if self.aiming and(al==sm.tool.interactState.stop or al==sm.tool.interactState.null)then self.aiming=false;self.tpAnimations.animations.idle.time=0;self:onAim(self.aiming)self.tool:setMovementSlowDown(self.aiming)self.network:sendToServer("sv_n_onAim",self.aiming)end end;function PotatoRifle.client_onEquippedUpdate(self,aw,ax)if unlocked then self._shooting=aw~=0;if self._shooting then self:cl_onPrimaryUse(aw)end;if ax~=self.prevSecondaryState then self:cl_onSecondaryUse(ax)self.prevSecondaryState=ax end;return true,true else if aw~=self.prevPrimaryState then self:cl_onPrimaryUse(aw)self.prevPrimaryState=aw end;if ax~=self.prevSecondaryState then self:cl_onSecondaryUse(ax)self.prevSecondaryState=ax end end;return true,true end
